<?php

require_once 'gstc.civix.php';

/**
 * Implements hook_civicrm_config().
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_config
 */
function gstc_civicrm_config(&$config) {
  _gstc_civix_civicrm_config($config);
}

/**
 * Implements hook_civicrm_xmlMenu().
 *
 * @param $files array(string)
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_xmlMenu
 */
function gstc_civicrm_xmlMenu(&$files) {
  _gstc_civix_civicrm_xmlMenu($files);
}

/**
 * Implements hook_civicrm_install().
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_install
 */
function gstc_civicrm_install() {
  _gstc_civix_civicrm_install();
}

/**
 * Implements hook_civicrm_uninstall().
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_uninstall
 */
function gstc_civicrm_uninstall() {
  _gstc_civix_civicrm_uninstall();
}

/**
 * Implements hook_civicrm_enable().
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_enable
 */
function gstc_civicrm_enable() {
  _gstc_civix_civicrm_enable();
}

/**
 * Implements hook_civicrm_disable().
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_disable
 */
function gstc_civicrm_disable() {
  _gstc_civix_civicrm_disable();
}

/**
 * Implements hook_civicrm_upgrade().
 *
 * @param $op string, the type of operation being performed; 'check' or 'enqueue'
 * @param $queue CRM_Queue_Queue, (for 'enqueue') the modifiable list of pending up upgrade tasks
 *
 * @return mixed
 *   Based on op. for 'check', returns array(boolean) (TRUE if upgrades are pending)
 *                for 'enqueue', returns void
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_upgrade
 */
function gstc_civicrm_upgrade($op, CRM_Queue_Queue $queue = NULL) {
  return _gstc_civix_civicrm_upgrade($op, $queue);
}

/**
 * Implements hook_civicrm_managed().
 *
 * Generate a list of entities to create/deactivate/delete when this module
 * is installed, disabled, uninstalled.
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_managed
 */
function gstc_civicrm_managed(&$entities) {
  _gstc_civix_civicrm_managed($entities);
}

/**
 * Implements hook_civicrm_caseTypes().
 *
 * Generate a list of case-types
 *
 * Note: This hook only runs in CiviCRM 4.4+.
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_caseTypes
 */
function gstc_civicrm_caseTypes(&$caseTypes) {
  _gstc_civix_civicrm_caseTypes($caseTypes);
}

/**
 * Implements hook_civicrm_angularModules().
 *
 * Generate a list of Angular modules.
 *
 * Note: This hook only runs in CiviCRM 4.5+. It may
 * use features only available in v4.6+.
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_caseTypes
 */
function gstc_civicrm_angularModules(&$angularModules) {
_gstc_civix_civicrm_angularModules($angularModules);
}

/**
 * Implements hook_civicrm_alterSettingsFolders().
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_alterSettingsFolders
 */
function gstc_civicrm_alterSettingsFolders(&$metaDataFolders = NULL) {
  _gstc_civix_civicrm_alterSettingsFolders($metaDataFolders);
}

/**
 * Functions below this ship commented out. Uncomment as required.
 *

/**
 * Implements hook_civicrm_preProcess().
 *
 * @link http://wiki.civicrm.org/confluence/display/CRMDOC/hook_civicrm_preProcess
 *
function gstc_civicrm_preProcess($formName, &$form) {

}

*/


/**
 * Implementation of hook_civicrm_buildForm
 */
function gstc_civicrm_buildForm($formName, &$form) {
  // also skip when content is loaded via ajax, like payment processor, custom data etc
  $snippet = CRM_Utils_Request::retrieve('snippet', 'String', CRM_Core_DAO::$_nullObject, false, null, 'REQUEST');

  if ( $snippet == 4 || ( $form->getVar('_action') && ($form->getVar('_action') & CRM_Core_Action::DELETE ) ) ) {
    return false;
  }
  if (in_array($formName, array('CRM_Contribute_Form_Contribution_Main')) && $form->getVar('_id') == '6') {
    CRM_Core_Resources::singleton()->addScript("
      //cj('.cms_user-section').insertAfter('.email-5-section');
    ");
  }
  CRM_Core_Resources::singleton()->addScript("
    cj('.crm-title').css('padding-top', '15px');
    cj('<legend>Create An Account</legend>').insertBefore('.cms_user_help-section');
    cj('.crm-container fieldset legend').css({'font-size': '18px','padding-top': '20px','margin-bottom': '5px'});
    cj('.crm-container .help').css({'padding': '14px'});
  ");
  

  if (in_array($formName, array('CRM_Contribute_Form_Contribution_Main')) && $form->getVar('_id') == '6' || $form->getVar('_id') == '7') {
    CRM_Core_Resources::singleton()->addScript("
      cj('.email-5-section').insertAfter('#editrow-last_name');
      cj('#_qf_Main_upload-bottom').val('Submit');
      cj('#membershipagreementdetail').click(function(e){
        e.preventDefault();
        window.popup = window.open(cj(this).attr('href'), 'newwindow', 'scrollbars=1,width=600, height=650');
      });
    ");
  }

  if (in_array($formName, array('CRM_Contribute_Form_Contribution_Main'))) {
    if (array_key_exists( 'auto_renew', $form->_elementIndex)) {
      CRM_Core_Resources::singleton()->addScript("
        function autoRenewAutoselect() {
          if(!cj('#auto_renew').is('[readonly]') && ! cj('#auto_renew').is(':checked')) {
            cj('#auto_renew').prop('checked',true);
            cj('#auto_renew').trigger('change');
          }
          if (cj('#allow_auto_renew').css('display') == 'none') {
            cj('#auto_renew').prop('checked',false);
            cj('#auto_renew').trigger('change');
          }
        }


        function checkPaylaterAutoRenew() {
          if ( cj('#auto_renew').is(':checked') && cj('#CIVICRM_QFID_0_payment_processor_id').length) {
            if (cj('#CIVICRM_QFID_0_payment_processor_id').is(':checked')) {
              cj('input[name=\'payment_processor_id\']').removeAttr('checked');
            }
            cj('#CIVICRM_QFID_0_payment_processor_id').hide();
            cj('label[for=\'CIVICRM_QFID_0_payment_processor_id\']').hide();
          } else if ( ! cj('#auto_renew').is(':checked') && cj('#CIVICRM_QFID_0_payment_processor_id').length) {
            cj('#CIVICRM_QFID_0_payment_processor_id').show();
            cj('label[for=\'CIVICRM_QFID_0_payment_processor_id\']').show();
          }
        }

        cj('.price-set-row').click( function() {
          autoRenewAutoselect();
        });

        cj('#auto_renew').change( function() {
          setTimeout(function() {
            checkPaylaterAutoRenew();
          }, 1000)
        });

        setTimeout(function() {
          autoRenewAutoselect();
          checkPaylaterAutoRenew();
        }, 2000); 
      ");
    }
  }
}


/**
 * Implementation of hook_civicrm_onbehalfOtherRelationship
 */
function gstc_civicrm_onbehalfOtherRelationship($ind, $org) {
  $params = array();
  $params['contact_id_a'] = $org;
  $params['contact_id_b'] = $ind;
  $params['relationship_type_id'] = 11;
  $params['is_active'] = 1;
  $params['version']    = 3;
  try {
    $get_relationship = civicrm_api('Relationship', 'get', $params);
    if ( $get_relationship['is_error'] == 0 && $get_relationship['count'] == 0) {
      $params['is_permission_b_a'] = '1';
      $out = civicrm_api('Relationship', 'Create', $params);
    }
  } catch (API_Exception $e) {
    // just to handle fatal error
  }

}
